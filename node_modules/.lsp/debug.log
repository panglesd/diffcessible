Hello - from /Users/yokurang/.vscode/extensions/jaredly.reason-vscode-1.7.13/bin.native
Previous log location: /var/folders/46/021wbfj97knb3m7s2khbp36r0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/bin/main.ml","languageId":"ocaml","version":1,"text":"open Diffcessible\nopen Cmdliner\n\nlet main file_path =\n  let file = In_channel.open_bin file_path in\n  let s = In_channel.input_all file in\n  let patch = Patch.to_diffs s in\n  InteractiveViewer.start patch\n\nlet file_arg =\n  let doc = \"Path to the file containing the Git diff.\" in\n  Arg.(required & pos 0 (some string) None & info [] ~docv:\"FILE\" ~doc)\n\nlet cmd =\n  let doc = \"Render Git diffs in an accessible way.\" in\n  let info = Cmd.info \"diffcessible\" ~version:\"VERSION\" ~doc in\n  Cmd.v info Term.(const main $ file_arg)\n\nlet () = exit (Cmd.eval cmd)\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/bin
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/bin
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/bin/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HelpView.ml","languageId":"ocaml","version":1,"text":"open Nottui\nmodule W = Nottui_widgets\n\nlet header_color = Notty.A.(fg lightred ++ st bold)\nlet action_color = Notty.A.(fg green)\nlet info_color = Notty.A.(fg yellow)\nlet help_visible = Lwd.var false\n\nlet help_panel =\n  Ui.vcat\n    [\n      W.string ~attr:header_color \"Help Panel:\\n\";\n      W.string ~attr:action_color \"h:   Open the help panel\";\n      W.string ~attr:action_color \"q:   Quit the diffcessible viewer\";\n      W.string ~attr:info_color \"n:   Move to the next operation, if present\";\n      W.string ~attr:info_color\n        \"p:   Move to the previous operation, if present\";\n      W.string ~attr:info_color \"t:   Toggle view mode\";\n      W.string ~attr:info_color \"l:   Toggle line numbers\";\n    ]\n\nlet help_keyboard_area =\n  Ui.keyboard_area\n    (function\n      | `ASCII 'q', [] ->\n          Lwd.set help_visible false;\n          `Handled\n      | _ -> `Unhandled)\n    (W.string ~attr:Notty.A.(fg lightblue) \"Type 'q' to exit the help panel\")\n\nlet toggle_help_visibility () =\n  Lwd.set help_visible (not (Lwd.peek help_visible))\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml","languageId":"ocaml","version":1,"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\n(* Implementation of Single View Mode *)\n\nlet ui_hunk_summary hunk =\n  let mine_info =\n    if hunk.Patch.mine_len = 0 then \"0,0\"\n    else Printf.sprintf \"%d,%d\" (hunk.Patch.mine_start + 1) hunk.Patch.mine_len\n  in\n  let their_info =\n    if hunk.Patch.their_len = 0 then \"0,0\"\n    else\n      Printf.sprintf \"%d,%d\" (hunk.Patch.their_start + 1) hunk.Patch.their_len\n  in\n  let mine_summary =\n    W.string ~attr:Notty.A.(fg red) (Printf.sprintf \"-%s\" mine_info)\n  in\n  let their_summary =\n    W.string ~attr:Notty.A.(fg green) (Printf.sprintf \"+%s\" their_info)\n  in\n  let at_symbols = W.string ~attr:Notty.A.(fg lightblue) \"@@\" in\n  Ui.hcat\n    [\n      at_symbols;\n      W.string \" \";\n      mine_summary;\n      W.string \" \";\n      their_summary;\n      W.string \" \";\n      at_symbols;\n    ]\n\nlet ui_unified_diff hunk =\n  let initial_line_nums = (hunk.Patch.mine_start, hunk.Patch.their_start) in\n\n  let update_lines (mine_line_num, their_line_num) = function\n    | `Common line ->\n        ( (mine_line_num + 1, their_line_num + 1),\n          W.string ~attr:Notty.A.empty\n            (Printf.sprintf \"%2d %2d   %s\" (mine_line_num + 1)\n               (their_line_num + 1) line) )\n    | `Their line ->\n        ( (mine_line_num, their_line_num + 1),\n          W.string\n            ~attr:Notty.A.(fg green)\n            (Printf.sprintf \"   %2d + %s\" (their_line_num + 1) line) )\n    | `Mine line ->\n        ( (mine_line_num + 1, their_line_num),\n          W.string\n            ~attr:Notty.A.(fg red)\n            (Printf.sprintf \"%2d    - %s\" (mine_line_num + 1) line) )\n  in\n  (* _ is the final state of the lines, if needed later *)\n  let _, lines_ui =\n    List.fold_left_map update_lines initial_line_nums hunk.Patch.lines\n  in\n  let lines_ui_vcat = Ui.vcat lines_ui in\n\n  Ui.vcat [ ui_hunk_summary hunk; lines_ui_vcat ]\n\nlet current_hunks z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks = List.map ui_unified_diff p.Patch.hunks in\n  Ui.vcat hunks\n\n(** Side by side diff view implementation **)\n\ntype view_mode = SideBySide | Normal\n\nlet view_mode = Lwd.var Normal\n\nlet toggle_view_mode () =\n  match Lwd.peek view_mode with\n  | Normal -> Lwd.set view_mode SideBySide\n  | SideBySide -> Lwd.set view_mode Normal\n\ntype line = Change of string | Common of string | Empty\n\nlet rec split_and_align_hunk hunks mine_acc their_acc =\n  let rec buffer_changes temp_mine temp_their hunks =\n    match hunks with\n    | [] -> (temp_mine, temp_their, hunks)\n    | `Common _ :: _ -> (temp_mine, temp_their, hunks)\n    | `Mine line :: t -> buffer_changes (Change line :: temp_mine) temp_their t\n    | `Their line :: t -> buffer_changes temp_mine (Change line :: temp_their) t\n  in\n  let append_balanced temp_mine temp_their =\n    let mine_len = List.length temp_mine in\n    let their_len = List.length temp_their in\n    let fill_empty n = List.init n (fun _ -> Empty) in\n\n    let diff = mine_len - their_len in\n    let empty_list = fill_empty (abs diff) in\n\n    if diff > 0 then (temp_mine, empty_list @ temp_their)\n    else if diff < 0 then (empty_list @ temp_mine, temp_their)\n    else (temp_mine, temp_their)\n  in\n\n  match hunks with\n  | [] -> (List.rev mine_acc, List.rev their_acc)\n  | _ -> (\n      let temp_mine, temp_their, remaining_hunks = buffer_changes [] [] hunks in\n      let balanced_mine, balanced_their =\n        append_balanced temp_mine temp_their\n      in\n      let updated_mine_acc = balanced_mine @ mine_acc in\n      let updated_their_acc = balanced_their @ their_acc in\n      match remaining_hunks with\n      | `Common line :: t ->\n          let common_mine_acc = Common line :: updated_mine_acc in\n          let common_their_acc = Common line :: updated_their_acc in\n          split_and_align_hunk t common_mine_acc common_their_acc\n      | _ ->\n          split_and_align_hunk remaining_hunks updated_mine_acc\n            updated_their_acc)\n\nlet lines_with_numbers lines attr_change prefix =\n  let line_num = ref 0 in\n  List.fold_left\n    (fun acc line ->\n      match line with\n      | Common s ->\n          incr line_num;\n          let content = Printf.sprintf \"%3d   %s\" !line_num s in\n          (content, Notty.A.empty) :: acc\n      | Change s ->\n          incr line_num;\n          let content = Printf.sprintf \"%3d %s %s\" !line_num prefix s in\n          (content, attr_change) :: acc\n      | Empty ->\n          let content = Printf.sprintf \"      \" in\n          (content, Notty.A.empty) :: acc)\n    [] lines\n  |> List.rev\n  |> List.map (fun (content, attr) -> W.string ~attr content)\n\nlet create_summary start_line_num hunk_length attr change_type =\n  let sign = match change_type with `Add -> \"+\" | `Remove -> \"-\" in\n  if hunk_length > 0 then\n    W.string ~attr\n      (Printf.sprintf \"@@ %s%d,%d @@\" sign start_line_num hunk_length)\n  else W.string ~attr (Printf.sprintf \"@@ %s0,0 @@\" sign)\n\nlet ui_of_hunk_side_by_side hunk =\n  let attr_mine = Notty.A.(fg red ++ st bold) in\n  let attr_their = Notty.A.(fg green ++ st bold) in\n\n  let mine_lines, their_lines = split_and_align_hunk hunk.Patch.lines [] [] in\n\n  let content_mine = lines_with_numbers mine_lines attr_mine \"-\" in\n  let content_their = lines_with_numbers their_lines attr_their \"+\" in\n  let summary_mine =\n    create_summary\n      (hunk.Patch.mine_start + 1)\n      hunk.Patch.mine_len attr_mine `Remove\n  in\n  let summary_their =\n    create_summary\n      (hunk.Patch.their_start + 1)\n      hunk.Patch.their_len attr_their `Add\n  in\n  let space = Ui.space 1 0 in\n  Ui.hcat\n    [\n      Ui.resize ~w:0 ~sw:2 (Ui.vcat (summary_mine :: content_mine));\n      space;\n      Ui.resize ~w:0 ~sw:2 (Ui.vcat (summary_their :: content_their));\n    ]\n\nlet current_hunks_side_by_side z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks_ui = List.map (fun h -> ui_of_hunk_side_by_side h) p.Patch.hunks in\n  Ui.vcat @@ hunks_ui\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/PatchNavigation.ml","languageId":"ocaml","version":1,"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\ntype direction = Prev | Next\n\nlet navigate z_patches (dir : direction) : unit =\n  let z = Lwd.peek z_patches in\n  match dir with\n  | Prev -> Lwd.set z_patches (Zipper.prev z)\n  | Next -> Lwd.set z_patches (Zipper.next z)\n\nlet quit = Lwd.var false\n\nlet additions_and_removals lines =\n  let add_line (additions, removals) line =\n    match line with\n    | `Their _ -> (additions + 1, removals)\n    | `Mine _ -> (additions, removals + 1)\n    | `Common _ -> (additions, removals)\n  in\n  List.fold_left add_line (0, 0) lines\n\nlet accumulate_count hunks =\n  List.fold_left\n    (fun (add_acc, remove_acc) hunk ->\n      let add_in_hunk, remove_in_hunk =\n        additions_and_removals hunk.Patch.lines\n      in\n      (add_acc + add_in_hunk, remove_acc + remove_in_hunk))\n    (0, 0) hunks\n\nlet change_summary z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let total_additions, total_removals = accumulate_count p.Patch.hunks in\n  let format_plural n singular plural =\n    if n = 1 then Printf.sprintf \"%d %s\" n singular\n    else Printf.sprintf \"%d %s\" n plural\n  in\n  let operation_count =\n    Printf.sprintf \"%s, %s\"\n      (format_plural total_additions \"addition\" \"additions\")\n      (format_plural total_removals \"removal\" \"removals\")\n  in\n  W.string ~attr:Notty.A.(fg lightcyan) operation_count\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/bin
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/bin
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/InteractiveViewer.ml","languageId":"ocaml","version":1,"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\nlet view (patches : Patch.t list) =\n  let z_patches : 'a Zipper.t Lwd.var =\n    match Zipper.zipper_of_list patches with\n    | Some z -> Lwd.var z\n    | None -> failwith \"zipper_of_list: empty list\"\n  in\n  let hunks_ui =\n    Lwd.bind (Lwd.get HunkView.view_mode) ~f:(fun mode ->\n        match mode with\n        | Normal -> HunkView.current_hunks z_patches\n        | SideBySide -> HunkView.current_hunks_side_by_side z_patches)\n  in\n  let curr_scroll_state = Lwd.var W.default_scroll_state in\n  let change_scroll_state _action state =\n    let off_screen = state.W.position > state.W.bound in\n    if off_screen then\n      Lwd.set curr_scroll_state { state with position = state.W.bound }\n    else Lwd.set curr_scroll_state state\n  in\n  let ui =\n    let$* help_visible = Lwd.get HelpView.help_visible in\n    if help_visible then\n      W.vbox\n        [\n          W.scrollbox @@ Lwd.pure @@ HelpView.help_panel;\n          Lwd.pure\n          @@ Ui.keyboard_area\n               (function\n                 | `ASCII 'q', [] ->\n                     HelpView.toggle_help_visibility ();\n                     `Handled\n                 | _ -> `Unhandled)\n               (W.string \"Type 'q' to exit the help panel\");\n        ]\n    else\n      W.vbox\n        [\n          OperationView.operation_info z_patches;\n          PatchNavigation.change_summary z_patches;\n          OperationView.current_operation z_patches;\n          W.vscroll_area\n            ~state:(Lwd.get curr_scroll_state)\n            ~change:change_scroll_state hunks_ui;\n          Lwd.pure\n          @@ Ui.keyboard_area\n               (function\n                 | `ASCII 'q', [] ->\n                     Lwd.set PatchNavigation.quit true;\n                     `Handled\n                 | `ASCII 'n', [] ->\n                     PatchNavigation.navigate z_patches PatchNavigation.Next;\n                     `Handled\n                 | `ASCII 'p', [] ->\n                     PatchNavigation.navigate z_patches PatchNavigation.Prev;\n                     `Handled\n                 | `ASCII 'h', [] ->\n                     HelpView.toggle_help_visibility ();\n                     `Handled\n                 | `ASCII 't', [] ->\n                     HunkView.toggle_view_mode ();\n                     `Handled\n                 | _ -> `Unhandled)\n               (W.string\n                  \"Type 'h' to go to the help panel, 'q' to quit, 'n' to go to \\\n                   the next operation, 'p' to go to the previous operation. \\\n                   Press 't' to toggle view mode.\");\n        ]\n  in\n  W.vbox [ ui ]\n\nlet start patch =\n  Ui_loop.run ~quit:PatchNavigation.quit ~tick_period:0.2 (view patch)\n\n(* Tests *)\n\nlet start_test patch events width height =\n  let convert_char_to_key (c : char) : Ui.key = (`ASCII c, []) in\n  let content_ui_root = Lwd.observe (view patch) in\n  let content_ui = Lwd.quick_sample content_ui_root in\n  let ui_renderer =\n    let renderer = Renderer.make () in\n    Renderer.update renderer (width, height) content_ui;\n    renderer\n  in\n\n  let rec process_events (events : char list) =\n    match events with\n    | [] -> ()\n    | event :: rest ->\n        let ui_event = convert_char_to_key event in\n        ignore (Renderer.dispatch_key ui_renderer ui_event);\n        Renderer.update ui_renderer (width, height)\n          (Lwd.quick_sample content_ui_root);\n        process_events rest\n  in\n\n  process_events events;\n  let init_image = Renderer.image ui_renderer in\n  Notty_unix.output_image init_image;\n  Lwd.quick_release content_ui_root;\n  print_newline ()\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/OperationView.ml","languageId":"ocaml","version":1,"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\nlet operation_info z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let num_hunks = List.length p.Patch.hunks in\n  let hunk_text =\n    match num_hunks with\n    | 1 -> \"1 hunk\"\n    | _ -> Printf.sprintf \"%d hunks\" num_hunks\n  in\n  W.string\n    ~attr:Notty.A.(fg lightcyan)\n    (Printf.sprintf \"Operation %d of %d, %s\"\n       (Zipper.get_current_index z + 1)\n       (Zipper.get_total_length z)\n       hunk_text)\n\nlet ui_of_operation operation =\n  let green_bold_attr = Notty.A.(fg green ++ st bold) in\n  let red_bold_attr = Notty.A.(fg red ++ st bold) in\n  let blue_bold_attr = Notty.A.(fg blue ++ st bold) in\n  match operation with\n  | Patch.Create path ->\n      Ui.hcat [ W.string \"Creation of \"; W.string ~attr:green_bold_attr path ]\n  | Patch.Delete path ->\n      Ui.hcat [ W.string \"Deletion of \"; W.string ~attr:red_bold_attr path ]\n  | Patch.Rename (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename with modifications \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Rename_only (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Edit path ->\n      Ui.hcat\n        [ W.string \"Modification of \"; W.string ~attr:blue_bold_attr path ]\n\nlet current_operation z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  ui_of_operation p.Patch.operation\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/test/cram/InteractiveViewerDummy.ml","languageId":"ocaml","version":1,"text":"open Cmdliner\nopen Diffcessible\n\nlet main file_path custom_inputs =\n  let file = In_channel.open_bin file_path in\n  let s = In_channel.input_all file in\n  let patch = Patch.to_diffs s in\n  InteractiveViewer.start_test patch custom_inputs\n\nlet file_arg =\n  let doc = \"Path to the file containing the Git diff.\" in\n  Arg.(required & pos 0 (some string) None & info [] ~docv:\"FILE\" ~doc)\n\nlet custom_inputs_arg =\n  let doc = \"Custom inputs.\" in\n  Arg.(value & pos_right 0 char [] & info [] ~docv:\"INPUTS\" ~doc)\n\nlet width_arg =\n  let doc = \"Width of the content image.\" in\n  Arg.(value & opt int 150 & info [ \"width\" ] ~docv:\"WIDTH\" ~doc)\n\nlet height_arg =\n  let doc = \"Height of the content image.\" in\n  Arg.(value & opt int 20 & info [ \"height\" ] ~docv:\"HEIGHT\" ~doc)\n\nlet cmd =\n  let doc = \"Render Git diffs in an accessible way.\" in\n  let info = Cmd.info \"diffcessible\" ~version:\"VERSION\" ~doc in\n  Cmd.v info\n    Term.(const main $ file_arg $ custom_inputs_arg $ width_arg $ height_arg)\n\nlet () = exit @@ Cmd.eval cmd\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/test/cram
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/test/cram
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/test/cram/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/test/cram
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/test/cram
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/test/unit/TestZipper.ml","languageId":"ocaml","version":1,"text":"open Diffcessible\n\nlet test_zipper_of_list candidate =\n  let b0 =\n    let lst = [ 1; 2; 3; 4; 5 ] in\n    match candidate lst with\n    | None -> false\n    | Some z ->\n        let test_b0 =\n          Zipper.get_focus z = 1\n          && Zipper.get_before z = []\n          && Zipper.get_after z = [ 2; 3; 4; 5 ]\n          && Zipper.get_total_length z = List.length lst\n          && Zipper.get_current_index z = 0\n        in\n        test_b0\n  in\n  let b1 =\n    let lst = [] in\n    match candidate lst with None -> true | _ -> false\n  in\n  b0 && b1\n\nlet test_next_zipper candidate =\n  let b0 =\n    let lst = [ 1; 2; 3; 4; 5 ] in\n    let z = Zipper.zipper_of_list lst in\n    match z with\n    | None -> false\n    | Some z ->\n        let next_z = candidate z in\n        let test_b0 =\n          Zipper.get_focus next_z = 2\n          && Zipper.get_before next_z = [ 1 ]\n          && Zipper.get_after next_z = [ 3; 4; 5 ]\n          && Zipper.get_total_length next_z = List.length lst\n          && Zipper.get_current_index next_z = 1\n        in\n        test_b0\n  in\n  b0\n\nlet test_previous_zipper candidate =\n  let b0 =\n    let lst = [ 1; 2; 3; 4; 5 ] in\n    let z = Zipper.zipper_of_list lst in\n    match z with\n    | None -> false\n    | Some z ->\n        let next_z = Zipper.next z in\n        let next_next_z = Zipper.next next_z in\n        let previous_z = candidate next_next_z in\n        let test_b0 =\n          Zipper.get_focus previous_z = 2\n          && Zipper.get_before previous_z = [ 1 ]\n          && Zipper.get_after previous_z = [ 3; 4; 5 ]\n          && Zipper.get_total_length previous_z = List.length lst\n          && Zipper.get_current_index previous_z = 1\n        in\n        test_b0\n  in\n  b0\n\nlet () =\n  assert (test_zipper_of_list Zipper.zipper_of_list);\n  assert (test_next_zipper Zipper.next);\n  assert (test_previous_zipper Zipper.prev);\n  print_endline \"All tests passed!\"\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/test/unit
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/test/unit
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/test/unit/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml"},"range":{"start":{"line":7,"character":17},"end":{"line":7,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/test/unit
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/test/unit
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 6, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml"},"range":{"start":{"line":7,"character":17},"end":{"line":7,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}
