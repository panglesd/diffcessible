[?1049h[?25l[?1000;1002;1005;1015;1006h[?2004h[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?25l[1;1H[?25l[?1049l[34h[?25h[?1000;1002;1005;1015;1006l[?2004lInput: Changed block
Mine: The quick brown fox jumps over the lazy dog.
Their: The fast brown fox leaps over the sleeping dog.
Computing diff between:
The quick brown fox jumps over the lazy dog.
and
The fast brown fox leaps over the sleeping dog.
Computed diff:
Equal: The
Added: fast
Deleted: quick
Equal: brown
Equal: fox
Added: leaps
Deleted: jumps
Equal: over
Equal: the
Added: sleeping
Deleted: lazy
Equal: dog.
Processing WEqual: The
Processing WAdded: fast
Processing WDeleted: quick
Processing WEqual: brown
Processing WEqual: fox
Processing WAdded: leaps
Processing WDeleted: jumps
Processing WEqual: over
Processing WEqual: the
Processing WAdded: sleeping
Processing WDeleted: lazy
Processing WEqual: dog.
Final result:
Mine content:
Unchanged: The
Changed: quick
Unchanged: brown
Unchanged: fox
Changed: jumps
Unchanged: over
Unchanged: the
Changed: lazy
Unchanged: dog.
Their content:
Unchanged: The
Changed: fast
Unchanged: brown
Unchanged: fox
Changed: leaps
Unchanged: over
Unchanged: the
Changed: sleeping
Unchanged: dog.
Input: Common block with string: She sells seashells by the seashore.
Input: Changed block
Mine: The rain in Spain stays mainly in the plain.
Their: The rain in France falls mainly on the plain.
Computing diff between:
The rain in Spain stays mainly in the plain.
and
The rain in France falls mainly on the plain.
Computed diff:
Equal: The
Equal: rain
Equal: in
Added: France
Deleted: Spain
Added: falls
Deleted: stays
Equal: mainly
Added: on
Deleted: in
Equal: the
Equal: plain.
Processing WEqual: The
Processing WEqual: rain
Processing WEqual: in
Processing WAdded: France
Processing WDeleted: Spain
Processing WAdded: falls
Processing WDeleted: stays
Processing WEqual: mainly
Processing WAdded: on
Processing WDeleted: in
Processing WEqual: the
Processing WEqual: plain.
Final result:
Mine content:
Unchanged: The
Unchanged: rain
Unchanged: in
Changed: Spain
Changed: stays
Unchanged: mainly
Changed: in
Unchanged: the
Unchanged: plain.
Their content:
Unchanged: The
Unchanged: rain
Unchanged: in
Changed: France
Changed: falls
Unchanged: mainly
Changed: on
Unchanged: the
Unchanged: plain.
Input: Common block with string: To be or not to be, that is the question.
Input: Changed block
Mine: All that glitters is not gold.
Their: Not all that glitters is gold.
Computing diff between:
All that glitters is not gold.
and
Not all that glitters is gold.
Computed diff:
Added: Not
Deleted: All
Added: all
Equal: that
Equal: glitters
Equal: is
Deleted: not
Equal: gold.
Processing WAdded: Not
Processing WDeleted: All
Processing WAdded: all
Processing WEqual: that
Processing WEqual: glitters
Processing WEqual: is
Processing WDeleted: not
Processing WEqual: gold.
Final result:
Mine content:
Changed: All
Unchanged: that
Unchanged: glitters
Unchanged: is
Changed: not
Unchanged: gold.
Their content:
Changed: Not
Changed: all
Unchanged: that
Unchanged: glitters
Unchanged: is
Unchanged: gold.
Input: Common block with string: A stitch in time saves nine.
Input: Changed block
Mine: An apple a day keeps the doctor away.
Their: An apple each day keeps the doctor away.
Computing diff between:
An apple a day keeps the doctor away.
and
An apple each day keeps the doctor away.
Computed diff:
Equal: An
Equal: apple
Added: each
Deleted: a
Equal: day
Equal: keeps
Equal: the
Equal: doctor
Equal: away.
Processing WEqual: An
Processing WEqual: apple
Processing WAdded: each
Processing WDeleted: a
Processing WEqual: day
Processing WEqual: keeps
Processing WEqual: the
Processing WEqual: doctor
Processing WEqual: away.
Final result:
Mine content:
Unchanged: An
Unchanged: apple
Changed: a
Unchanged: day
Unchanged: keeps
Unchanged: the
Unchanged: doctor
Unchanged: away.
Their content:
Unchanged: An
Unchanged: apple
Changed: each
Unchanged: day
Unchanged: keeps
Unchanged: the
Unchanged: doctor
Unchanged: away.
Input: Common block with string: Actions speak louder than words.
Input: Changed block
Mine: The early bird catches the worm.
Their: The early riser catches the worm.
Computing diff between:
The early bird catches the worm.
and
The early riser catches the worm.
Computed diff:
Equal: The
Equal: early
Added: riser
Deleted: bird
Equal: catches
Equal: the
Equal: worm.
Processing WEqual: The
Processing WEqual: early
Processing WAdded: riser
Processing WDeleted: bird
Processing WEqual: catches
Processing WEqual: the
Processing WEqual: worm.
Final result:
Mine content:
Unchanged: The
Unchanged: early
Changed: bird
Unchanged: catches
Unchanged: the
Unchanged: worm.
Their content:
Unchanged: The
Unchanged: early
Changed: riser
Unchanged: catches
Unchanged: the
Unchanged: worm.
Input: Changed block
Mine: Practice makes perfect.
Their: Practice leads to perfection.
Computing diff between:
Practice makes perfect.
and
Practice leads to perfection.
Computed diff:
Equal: Practice
Added: leads
Deleted: makes
Added: to
Deleted: perfect.
Added: perfection.
Processing WEqual: Practice
Processing WAdded: leads
Processing WDeleted: makes
Processing WAdded: to
Processing WDeleted: perfect.
Processing WAdded: perfection.
Final result:
Mine content:
Unchanged: Practice
Changed: makes
Changed: perfect.
Their content:
Unchanged: Practice
Changed: leads
Changed: to
Changed: perfection.
Input: Common block with string: When in Rome, do as the Romans do.
Input: Changed block
Mine: Don't put all your eggs in one basket.
Their: Never put all your eggs in one basket.
Computing diff between:
Don't put all your eggs in one basket.
and
Never put all your eggs in one basket.
Computed diff:
Added: Never
Deleted: Don't
Equal: put
Equal: all
Equal: your
Equal: eggs
Equal: in
Equal: one
Equal: basket.
Processing WAdded: Never
Processing WDeleted: Don't
Processing WEqual: put
Processing WEqual: all
Processing WEqual: your
Processing WEqual: eggs
Processing WEqual: in
Processing WEqual: one
Processing WEqual: basket.
Final result:
Mine content:
Changed: Don't
Unchanged: put
Unchanged: all
Unchanged: your
Unchanged: eggs
Unchanged: in
Unchanged: one
Unchanged: basket.
Their content:
Changed: Never
Unchanged: put
Unchanged: all
Unchanged: your
Unchanged: eggs
Unchanged: in
Unchanged: one
Unchanged: basket.
Input: Common block with string: A penny saved is a penny earned.
Input: Changed block
Mine: Every cloud has a silver lining.
Their: Every cloud possesses a silver lining.
Computing diff between:
Every cloud has a silver lining.
and
Every cloud possesses a silver lining.
Computed diff:
Equal: Every
Equal: cloud
Added: possesses
Deleted: has
Equal: a
Equal: silver
Equal: lining.
Processing WEqual: Every
Processing WEqual: cloud
Processing WAdded: possesses
Processing WDeleted: has
Processing WEqual: a
Processing WEqual: silver
Processing WEqual: lining.
Final result:
Mine content:
Unchanged: Every
Unchanged: cloud
Changed: has
Unchanged: a
Unchanged: silver
Unchanged: lining.
Their content:
Unchanged: Every
Unchanged: cloud
Changed: possesses
Unchanged: a
Unchanged: silver
Unchanged: lining.
Input: Changed block
Mine: Two wrongs don't make a right.
Their: Two wrongs never make a right.
Computing diff between:
Two wrongs don't make a right.
and
Two wrongs never make a right.
Computed diff:
Equal: Two
Equal: wrongs
Added: never
Deleted: don't
Equal: make
Equal: a
Equal: right.
Processing WEqual: Two
Processing WEqual: wrongs
Processing WAdded: never
Processing WDeleted: don't
Processing WEqual: make
Processing WEqual: a
Processing WEqual: right.
Final result:
Mine content:
Unchanged: Two
Unchanged: wrongs
Changed: don't
Unchanged: make
Unchanged: a
Unchanged: right.
Their content:
Unchanged: Two
Unchanged: wrongs
Changed: never
Unchanged: make
Unchanged: a
Unchanged: right.
Input: Common block with string: The pen is mightier than the sword.
Input: Changed block
Mine: 
Their: Words can be sharper than any blade.
Computing diff between:

and
Words can be sharper than any blade.
Computed diff:
Added: Words
Deleted: 
Added: can
Added: be
Added: sharper
Added: than
Added: any
Added: blade.
Processing WAdded: Words
Processing WDeleted: 
Processing WAdded: can
Processing WAdded: be
Processing WAdded: sharper
Processing WAdded: than
Processing WAdded: any
Processing WAdded: blade.
Final result:
Mine content:
Changed: 
Their content:
Changed: Words
Changed: can
Changed: be
Changed: sharper
Changed: than
Changed: any
Changed: blade.
Input: Changed block
Mine: foo bar baz
Their: foo bat bak
Computing diff between:
foo bar baz
and
foo bat bak
Computed diff:
Equal: foo
Added: bat
Deleted: bar
Added: bak
Deleted: baz
Processing WEqual: foo
Processing WAdded: bat
Processing WDeleted: bar
Processing WAdded: bak
Processing WDeleted: baz
Final result:
Mine content:
Unchanged: foo
Changed: bar
Changed: baz
Their content:
Unchanged: foo
Changed: bat
Changed: bak
Input: Changed block
Mine: The quick brown fox jumps over the lazy dog.
Their: The quick black cat jumps over the lazy dog.
Computing diff between:
The quick brown fox jumps over the lazy dog.
and
The quick black cat jumps over the lazy dog.
Computed diff:
Equal: The
Equal: quick
Added: black
Deleted: brown
Added: cat
Deleted: fox
Equal: jumps
Equal: over
Equal: the
Equal: lazy
Equal: dog.
Processing WEqual: The
Processing WEqual: quick
Processing WAdded: black
Processing WDeleted: brown
Processing WAdded: cat
Processing WDeleted: fox
Processing WEqual: jumps
Processing WEqual: over
Processing WEqual: the
Processing WEqual: lazy
Processing WEqual: dog.
Final result:
Mine content:
Unchanged: The
Unchanged: quick
Changed: brown
Changed: fox
Unchanged: jumps
Unchanged: over
Unchanged: the
Unchanged: lazy
Unchanged: dog.
Their content:
Unchanged: The
Unchanged: quick
Changed: black
Changed: cat
Unchanged: jumps
Unchanged: over
Unchanged: the
Unchanged: lazy
Unchanged: dog.
Input: Changed block
Mine: She sells sea shells by the sea shore.
Their: He sells sea shells by the sea floor.
Computing diff between:
She sells sea shells by the sea shore.
and
He sells sea shells by the sea floor.
Computed diff:
Added: He
Deleted: She
Equal: sells
Equal: sea
Equal: shells
Equal: by
Equal: the
Equal: sea
Added: floor.
Deleted: shore.
Processing WAdded: He
Processing WDeleted: She
Processing WEqual: sells
Processing WEqual: sea
Processing WEqual: shells
Processing WEqual: by
Processing WEqual: the
Processing WEqual: sea
Processing WAdded: floor.
Processing WDeleted: shore.
Final result:
Mine content:
Changed: She
Unchanged: sells
Unchanged: sea
Unchanged: shells
Unchanged: by
Unchanged: the
Unchanged: sea
Changed: shore.
Their content:
Changed: He
Unchanged: sells
Unchanged: sea
Unchanged: shells
Unchanged: by
Unchanged: the
Unchanged: sea
Changed: floor.
Input: Common block with string: (executable
Input: Common block with string:  (public_name diffcessible)
Input: Common block with string:  (name main)
Input: Changed block
Mine:  (libraries diffcessible cmdliner))
Their:  (libraries diffcessible cmdliner patch))
Computing diff between:
 (libraries diffcessible cmdliner))
and
 (libraries diffcessible cmdliner patch))
Computed diff:
Equal: 
Equal: (libraries
Equal: diffcessible
Added: cmdliner
Deleted: cmdliner))
Added: patch))
Processing WEqual: 
Processing WEqual: (libraries
Processing WEqual: diffcessible
Processing WAdded: cmdliner
Processing WDeleted: cmdliner))
Processing WAdded: patch))
Final result:
Mine content:
Unchanged: 
Unchanged: (libraries
Unchanged: diffcessible
Changed: cmdliner))
Their content:
Unchanged: 
Unchanged: (libraries
Unchanged: diffcessible
Changed: cmdliner
Changed: patch))
Input: Common block with string: open Diffcessible
Input: Common block with string: 
Input: Common block with string: let main () =
Input: Changed block
Mine:   Interactive_viewer.start ()
Their:   let s = In_channel.input_all In_channel.stdin in   let patch = Patch.to_diffs s in   Interactive_viewer.start patch
Computing diff between:
  Interactive_viewer.start ()
and
  let s = In_channel.input_all In_channel.stdin in   let patch = Patch.to_diffs s in   Interactive_viewer.start patch
Computed diff:
Equal: 
Equal: 
Added: let
Added: s
Added: =
Added: In_channel.input_all
Added: In_channel.stdin
Added: in
Added: 
Added: 
Added: let
Added: patch
Added: =
Added: Patch.to_diffs
Added: s
Added: in
Added: 
Added: 
Equal: Interactive_viewer.start
Added: patch
Deleted: ()
Processing WEqual: 
Processing WEqual: 
Processing WAdded: let
Processing WAdded: s
Processing WAdded: =
Processing WAdded: In_channel.input_all
Processing WAdded: In_channel.stdin
Processing WAdded: in
Processing WAdded: 
Processing WAdded: 
Processing WAdded: let
Processing WAdded: patch
Processing WAdded: =
Processing WAdded: Patch.to_diffs
Processing WAdded: s
Processing WAdded: in
Processing WAdded: 
Processing WAdded: 
Processing WEqual: Interactive_viewer.start
Processing WAdded: patch
Processing WDeleted: ()
Final result:
Mine content:
Unchanged: 
Unchanged: 
Unchanged: Interactive_viewer.start
Changed: ()
Their content:
Unchanged: 
Unchanged: 
Changed: let
Changed: s
Changed: =
Changed: In_channel.input_all
Changed: In_channel.stdin
Changed: in
Changed: 
Changed: 
Changed: let
Changed: patch
Changed: =
Changed: Patch.to_diffs
Changed: s
Changed: in
Changed: 
Changed: 
Unchanged: Interactive_viewer.start
Changed: patch
Input: Common block with string: 
Input: Common block with string: open Cmdliner
Input: Common block with string: 
Input: Common block with string: (library
Input: Common block with string:  (name diffcessible)
Input: Changed block
Mine:  (libraries notty nottui lwd))
Their:  (libraries notty nottui lwd patch))
Computing diff between:
 (libraries notty nottui lwd))
and
 (libraries notty nottui lwd patch))
Computed diff:
Equal: 
Equal: (libraries
Equal: notty
Equal: nottui
Added: lwd
Deleted: lwd))
Added: patch))
Processing WEqual: 
Processing WEqual: (libraries
Processing WEqual: notty
Processing WEqual: nottui
Processing WAdded: lwd
Processing WDeleted: lwd))
Processing WAdded: patch))
Final result:
Mine content:
Unchanged: 
Unchanged: (libraries
Unchanged: notty
Unchanged: nottui
Changed: lwd))
Their content:
Unchanged: 
Unchanged: (libraries
Unchanged: notty
Unchanged: nottui
Changed: lwd
Changed: patch))
Input: Common block with string: open Nottui
Input: Common block with string: module W = Nottui_widgets
Input: Changed block
Mine: open Lwd_infix  type patch = unit
Their: (* open Lwd_infix *)
Computing diff between:
open Lwd_infix  type patch = unit
and
(* open Lwd_infix *)
Computed diff:
Added: (*
Equal: open
Equal: Lwd_infix
Added: *)
Deleted: 
Deleted: type
Deleted: patch
Deleted: =
Deleted: unit
Processing WAdded: (*
Processing WEqual: open
Processing WEqual: Lwd_infix
Processing WAdded: *)
Processing WDeleted: 
Processing WDeleted: type
Processing WDeleted: patch
Processing WDeleted: =
Processing WDeleted: unit
Final result:
Mine content:
Unchanged: open
Unchanged: Lwd_infix
Changed: 
Changed: type
Changed: patch
Changed: =
Changed: unit
Their content:
Changed: (*
Unchanged: open
Unchanged: Lwd_infix
Changed: *)
Input: Common block with string: 
Input: Common block with string: let pure_str s = Lwd.pure (W.string s)
Input: Changed block
Mine:  let string_of_counter c =   let$ c = c in   W.string (string_of_int c) 
Their: 
Computing diff between:
 let string_of_counter c =   let$ c = c in   W.string (string_of_int c) 
and

Computed diff:
Equal: 
Deleted: let
Deleted: string_of_counter
Deleted: c
Deleted: =
Deleted: 
Deleted: 
Deleted: let$
Deleted: c
Deleted: =
Deleted: c
Deleted: in
Deleted: 
Deleted: 
Deleted: W.string
Deleted: (string_of_int
Deleted: c)
Deleted: 
Processing WEqual: 
Processing WDeleted: let
Processing WDeleted: string_of_counter
Processing WDeleted: c
Processing WDeleted: =
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: let$
Processing WDeleted: c
Processing WDeleted: =
Processing WDeleted: c
Processing WDeleted: in
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: W.string
Processing WDeleted: (string_of_int
Processing WDeleted: c)
Processing WDeleted: 
Final result:
Mine content:
Unchanged: 
Changed: let
Changed: string_of_counter
Changed: c
Changed: =
Changed: 
Changed: 
Changed: let$
Changed: c
Changed: =
Changed: c
Changed: in
Changed: 
Changed: 
Changed: W.string
Changed: (string_of_int
Changed: c)
Changed: 
Their content:
Unchanged: 
Input: Common block with string: let quit = Lwd.var false
Input: Changed block
Mine: let counter = Lwd.var 0 let counter_d = Lwd.get counter
Their: let string_of_operation = Format.asprintf "%a" (Patch.pp_operation ~git:false)
Computing diff between:
let counter = Lwd.var 0 let counter_d = Lwd.get counter
and
let string_of_operation = Format.asprintf "%a" (Patch.pp_operation ~git:false)
Computed diff:
Equal: let
Added: string_of_operation
Deleted: counter
Equal: =
Added: Format.asprintf
Deleted: Lwd.var
Added: "%a"
Deleted: 0
Added: (Patch.pp_operation
Deleted: let
Added: ~git:false)
Deleted: counter_d
Deleted: =
Deleted: Lwd.get
Deleted: counter
Processing WEqual: let
Processing WAdded: string_of_operation
Processing WDeleted: counter
Processing WEqual: =
Processing WAdded: Format.asprintf
Processing WDeleted: Lwd.var
Processing WAdded: "%a"
Processing WDeleted: 0
Processing WAdded: (Patch.pp_operation
Processing WDeleted: let
Processing WAdded: ~git:false)
Processing WDeleted: counter_d
Processing WDeleted: =
Processing WDeleted: Lwd.get
Processing WDeleted: counter
Final result:
Mine content:
Unchanged: let
Changed: counter
Unchanged: =
Changed: Lwd.var
Changed: 0
Changed: let
Changed: counter_d
Changed: =
Changed: Lwd.get
Changed: counter
Their content:
Unchanged: let
Changed: string_of_operation
Unchanged: =
Changed: Format.asprintf
Changed: "%a"
Changed: (Patch.pp_operation
Changed: ~git:false)
Input: Common block with string: 
Input: Changed block
Mine: let view =
Their: let view (patch : Patch.t list) =   let patch = match patch with p :: _ -> p | _ -> assert false in
Computing diff between:
let view =
and
let view (patch : Patch.t list) =   let patch = match patch with p :: _ -> p | _ -> assert false in
Computed diff:
Equal: let
Equal: view
Added: (patch
Added: :
Added: Patch.t
Added: list)
Equal: =
Added: 
Added: 
Added: let
Added: patch
Added: =
Added: match
Added: patch
Added: with
Added: p
Added: ::
Added: _
Added: ->
Added: p
Added: |
Added: _
Added: ->
Added: assert
Added: false
Added: in
Processing WEqual: let
Processing WEqual: view
Processing WAdded: (patch
Processing WAdded: :
Processing WAdded: Patch.t
Processing WAdded: list)
Processing WEqual: =
Processing WAdded: 
Processing WAdded: 
Processing WAdded: let
Processing WAdded: patch
Processing WAdded: =
Processing WAdded: match
Processing WAdded: patch
Processing WAdded: with
Processing WAdded: p
Processing WAdded: ::
Processing WAdded: _
Processing WAdded: ->
Processing WAdded: p
Processing WAdded: |
Processing WAdded: _
Processing WAdded: ->
Processing WAdded: assert
Processing WAdded: false
Processing WAdded: in
Final result:
Mine content:
Unchanged: let
Unchanged: view
Unchanged: =
Their content:
Unchanged: let
Unchanged: view
Changed: (patch
Changed: :
Changed: Patch.t
Changed: list)
Unchanged: =
Changed: 
Changed: 
Changed: let
Changed: patch
Changed: =
Changed: match
Changed: patch
Changed: with
Changed: p
Changed: ::
Changed: _
Changed: ->
Changed: p
Changed: |
Changed: _
Changed: ->
Changed: assert
Changed: false
Changed: in
Input: Common block with string:   W.scrollbox
Input: Common block with string:     (W.vbox
Input: Common block with string:        [
Input: Changed block
Mine:          pure_str "Hello world!";          string_of_counter counter_d;
Their:          pure_str (string_of_operation patch.operation);
Computing diff between:
         pure_str "Hello world!";          string_of_counter counter_d;
and
         pure_str (string_of_operation patch.operation);
Computed diff:
Equal: 
Equal: 
Equal: 
Equal: 
Equal: 
Equal: 
Equal: 
Equal: 
Equal: 
Equal: pure_str
Added: (string_of_operation
Deleted: "Hello
Added: patch.operation);
Deleted: world!";
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: string_of_counter
Deleted: counter_d;
Processing WEqual: 
Processing WEqual: 
Processing WEqual: 
Processing WEqual: 
Processing WEqual: 
Processing WEqual: 
Processing WEqual: 
Processing WEqual: 
Processing WEqual: 
Processing WEqual: pure_str
Processing WAdded: (string_of_operation
Processing WDeleted: "Hello
Processing WAdded: patch.operation);
Processing WDeleted: world!";
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: string_of_counter
Processing WDeleted: counter_d;
Final result:
Mine content:
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: pure_str
Changed: "Hello
Changed: world!";
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: string_of_counter
Changed: counter_d;
Their content:
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: 
Unchanged: pure_str
Changed: (string_of_operation
Changed: patch.operation);
Input: Common block with string:          Lwd.pure
Input: Common block with string:          @@ Ui.keyboard_area
Input: Common block with string:               (function
Input: Common block with string:                 | `ASCII 'q', [] ->
Input: Common block with string:                     Lwd.set quit true;
Input: Common block with string:                     `Handled
Input: Changed block
Mine:                 | `ASCII 'a', [] ->                     Lwd.set counter (Lwd.peek counter + 1);                     `Handled                 | `ASCII 'b', [] ->                     Lwd.set counter (Lwd.peek counter - 1);                     `Handled
Their: 
Computing diff between:
                | `ASCII 'a', [] ->                     Lwd.set counter (Lwd.peek counter + 1);                     `Handled                 | `ASCII 'b', [] ->                     Lwd.set counter (Lwd.peek counter - 1);                     `Handled
and

Computed diff:
Equal: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: |
Deleted: `ASCII
Deleted: 'a',
Deleted: []
Deleted: ->
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: Lwd.set
Deleted: counter
Deleted: (Lwd.peek
Deleted: counter
Deleted: +
Deleted: 1);
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: `Handled
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: |
Deleted: `ASCII
Deleted: 'b',
Deleted: []
Deleted: ->
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: Lwd.set
Deleted: counter
Deleted: (Lwd.peek
Deleted: counter
Deleted: -
Deleted: 1);
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: 
Deleted: `Handled
Processing WEqual: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: |
Processing WDeleted: `ASCII
Processing WDeleted: 'a',
Processing WDeleted: []
Processing WDeleted: ->
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: Lwd.set
Processing WDeleted: counter
Processing WDeleted: (Lwd.peek
Processing WDeleted: counter
Processing WDeleted: +
Processing WDeleted: 1);
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: `Handled
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: |
Processing WDeleted: `ASCII
Processing WDeleted: 'b',
Processing WDeleted: []
Processing WDeleted: ->
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: Lwd.set
Processing WDeleted: counter
Processing WDeleted: (Lwd.peek
Processing WDeleted: counter
Processing WDeleted: -
Processing WDeleted: 1);
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: 
Processing WDeleted: `Handled
Final result:
Mine content:
Unchanged: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: |
Changed: `ASCII
Changed: 'a',
Changed: []
Changed: ->
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: Lwd.set
Changed: counter
Changed: (Lwd.peek
Changed: counter
Changed: +
Changed: 1);
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: `Handled
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: |
Changed: `ASCII
Changed: 'b',
Changed: []
Changed: ->
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: Lwd.set
Changed: counter
Changed: (Lwd.peek
Changed: counter
Changed: -
Changed: 1);
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: 
Changed: `Handled
Their content:
Unchanged: 
Input: Common block with string:                 | _ -> `Unhandled)
Input: Common block with string:               (W.string "Type 'q' to quit.");
Input: Common block with string:        ])
Input: Common block with string: 
Input: Changed block
Mine: let start () = Ui_loop.run ~quit ~tick_period:0.2 view
Their: let start patch = Ui_loop.run ~quit ~tick_period:0.2 (view patch)
Computing diff between:
let start () = Ui_loop.run ~quit ~tick_period:0.2 view
and
let start patch = Ui_loop.run ~quit ~tick_period:0.2 (view patch)
Computed diff:
Equal: let
Equal: start
Added: patch
Deleted: ()
Equal: =
Equal: Ui_loop.run
Equal: ~quit
Equal: ~tick_period:0.2
Added: (view
Deleted: view
Added: patch)
Processing WEqual: let
Processing WEqual: start
Processing WAdded: patch
Processing WDeleted: ()
Processing WEqual: =
Processing WEqual: Ui_loop.run
Processing WEqual: ~quit
Processing WEqual: ~tick_period:0.2
Processing WAdded: (view
Processing WDeleted: view
Processing WAdded: patch)
Final result:
Mine content:
Unchanged: let
Unchanged: start
Changed: ()
Unchanged: =
Unchanged: Ui_loop.run
Unchanged: ~quit
Unchanged: ~tick_period:0.2
Changed: view
Their content:
Unchanged: let
Unchanged: start
Changed: patch
Unchanged: =
Unchanged: Ui_loop.run
Unchanged: ~quit
Unchanged: ~tick_period:0.2
Changed: (view
Changed: patch)
Input: Common block with string: (** Render and navigate through a diff. *)
Input: Common block with string: 
Input: Changed block
Mine: type patch = unit  val start : patch -> unit
Their: val start : Patch.t list -> unit
Computing diff between:
type patch = unit  val start : patch -> unit
and
val start : Patch.t list -> unit
Computed diff:
Deleted: type
Deleted: patch
Deleted: =
Deleted: unit
Deleted: 
Equal: val
Equal: start
Equal: :
Added: Patch.t
Deleted: patch
Added: list
Equal: ->
Equal: unit
Processing WDeleted: type
Processing WDeleted: patch
Processing WDeleted: =
Processing WDeleted: unit
Processing WDeleted: 
Processing WEqual: val
Processing WEqual: start
Processing WEqual: :
Processing WAdded: Patch.t
Processing WDeleted: patch
Processing WAdded: list
Processing WEqual: ->
Processing WEqual: unit
Final result:
Mine content:
Changed: type
Changed: patch
Changed: =
Changed: unit
Changed: 
Unchanged: val
Unchanged: start
Unchanged: :
Changed: patch
Unchanged: ->
Unchanged: unit
Their content:
Unchanged: val
Unchanged: start
Unchanged: :
Changed: Patch.t
Changed: list
Unchanged: ->
Unchanged: unit
Input: Changed block
Mine: This is the original content.
Their: This is the modified content.
Computing diff between:
This is the original content.
and
This is the modified content.
Computed diff:
Equal: This
Equal: is
Equal: the
Added: modified
Deleted: original
Equal: content.
Processing WEqual: This
Processing WEqual: is
Processing WEqual: the
Processing WAdded: modified
Processing WDeleted: original
Processing WEqual: content.
Final result:
Mine content:
Unchanged: This
Unchanged: is
Unchanged: the
Changed: original
Unchanged: content.
Their content:
Unchanged: This
Unchanged: is
Unchanged: the
Changed: modified
Unchanged: content.
