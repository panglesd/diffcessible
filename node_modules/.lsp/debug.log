Hello - from /Users/yokurang/.vscode/extensions/jaredly.reason-vscode-1.7.13/bin.native
Previous log location: /var/folders/46/021wbfj97knb3m7s2khbp36r0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml","languageId":"ocaml","version":1,"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\nlet operation_info z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let num_hunks = List.length p.Patch.hunks in\n  let hunk_text =\n    match num_hunks with\n    | 1 -> \"1 hunk\"\n    | _ -> Printf.sprintf \"%d hunks\" num_hunks\n  in\n  W.string\n    ~attr:Notty.A.(fg lightcyan)\n    (Printf.sprintf \"Operation %d of %d, %s\"\n       (Zipper.get_current_index z + 1)\n       (Zipper.get_total_length z)\n       hunk_text)\n\nlet ui_of_operation operation =\n  let green_bold_attr = Notty.A.(fg green ++ st bold) in\n  let red_bold_attr = Notty.A.(fg red ++ st bold) in\n  let blue_bold_attr = Notty.A.(fg blue ++ st bold) in\n  match operation with\n  | Patch.Create path ->\n      Ui.hcat [ W.string \"Creation of \"; W.string ~attr:green_bold_attr path ]\n  | Patch.Delete path ->\n      Ui.hcat [ W.string \"Deletion of \"; W.string ~attr:red_bold_attr path ]\n  | Patch.Rename (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename with modifications \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Rename_only (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Edit path ->\n      Ui.hcat\n        [ W.string \"Modification of \"; W.string ~attr:blue_bold_attr path ]\n\nlet string_of_hunk = Format.asprintf \"%a\" Patch.pp_hunk\n\nlet current_operation z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  ui_of_operation p.Patch.operation\n\nlet current_hunks z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks = List.map (fun h -> W.string (string_of_hunk h)) p.Patch.hunks in\n  Ui.vcat @@ hunks\n\ntype direction = Prev | Next\n\nlet navigate z_patches (dir : direction) : unit =\n  let z = Lwd.peek z_patches in\n  match dir with\n  | Prev -> Lwd.set z_patches (Zipper.prev z)\n  | Next -> Lwd.set z_patches (Zipper.next z)\n\nlet quit = Lwd.var false\nlet help = Lwd.var false\n\nlet additions_and_removals lines =\n  let add_line (additions, removals) line =\n    match line with\n    | `Their _ -> (additions + 1, removals)\n    | `Mine _ -> (additions, removals + 1)\n    | `Common _ -> (additions, removals)\n  in\n  List.fold_left add_line (0, 0) lines\n\nlet accumulate_count hunks =\n  List.fold_left\n    (fun (add_acc, remove_acc) hunk ->\n      let add_in_hunk, remove_in_hunk =\n        additions_and_removals hunk.Patch.lines\n      in\n      (add_acc + add_in_hunk, remove_acc + remove_in_hunk))\n    (0, 0) hunks\n\nlet change_summary z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let total_additions, total_removals = accumulate_count p.Patch.hunks in\n  let format_plural n singular plural =\n    if n = 1 then Printf.sprintf \"%d %s\" n singular\n    else Printf.sprintf \"%d %s\" n plural\n  in\n  let operation_count =\n    Printf.sprintf \"%s, %s\"\n      (format_plural total_additions \"addition\" \"additions\")\n      (format_plural total_removals \"removal\" \"removals\")\n  in\n  W.string ~attr:Notty.A.(fg lightcyan) operation_count\n\nlet split_hunk hunk =\n  let mine, their =\n    List.fold_left\n      (fun (mine_acc, their_acc) line ->\n        match line with\n        | `Common s -> (mine_acc @ [ `Common s ], their_acc @ [ `Common s ])\n        | `Mine s -> (mine_acc @ [ `Mine s ], their_acc)\n        | `Their s -> (mine_acc, their_acc @ [ `Their s ]))\n      ([], []) hunk.Patch.lines\n  in\n  (mine, their)\n\nlet lines_to_ui_with_numbers lines attr_line_number attr_change =\n  List.mapi\n    (fun index line ->\n      let ui_line, attr =\n        match line with\n        | `Common s ->\n            (s, attr_line_number) (* Common lines use the line number color *)\n        | `Mine s -> (s, attr_change) (* Mine lines use the deletion color *)\n        | `Their s -> (s, attr_change)\n        (* Their lines use the addition color *)\n      in\n      Ui.hcat\n        [\n          W.string ~attr:attr_line_number (Printf.sprintf \"%4d \" (index + 1));\n          W.string ~attr ui_line;\n        ])\n    lines\n\nlet ui_of_hunk_side_by_side hunk =\n  let mine_lines, their_lines = split_hunk hunk in\n\n  let attr_line_number = Notty.A.(fg lightblue) in\n  let attr_mine = Notty.A.(fg red ++ st bold) in\n  let attr_their = Notty.A.(fg green ++ st bold) in\n\n  let separator = W.string ~attr:attr_line_number \"|\" in\n\n  (* For mine lines, we use the deletion color, and for their lines, the addition color *)\n  let mine_ui =\n    lines_to_ui_with_numbers mine_lines attr_line_number attr_mine\n  in\n  let their_ui =\n    lines_to_ui_with_numbers their_lines attr_line_number attr_their\n  in\n\n  let space = Ui.space 1 0 in\n  (* Adding a visual gap *)\n  Ui.hcat [ Ui.vcat mine_ui; space; separator; space; Ui.vcat their_ui ]\n\nlet current_hunks_side_by_side z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks_ui = List.map ui_of_hunk_side_by_side p.Patch.hunks in\n  Ui.vcat @@ hunks_ui\n\ntype view_mode = SideBySide | Regular\n\nlet view_mode = Lwd.var SideBySide\n\nlet toggle_view_mode () =\n  match Lwd.peek view_mode with\n  | Regular -> Lwd.set view_mode SideBySide\n  | SideBySide -> Lwd.set view_mode Regular\n\nlet view (patches : Patch.t list) =\n  let help_panel =\n    Ui.vcat\n      [\n        W.string \"Help Panel:\\n\";\n        W.string \"h:   Open the help panel\";\n        W.string \"q:   Quit the diffcessible viewer\";\n        W.string \"n:   Move to the next operation, if present\";\n        W.string \"p:   Move to the previous operation, if present\";\n      ]\n  in\n  let z_patches : 'a Zipper.t Lwd.var =\n    match Zipper.zipper_of_list patches with\n    | Some z -> Lwd.var z\n    | None -> failwith \"zipper_of_list: empty list\"\n  in\n<<<<<<< HEAD\n  let hunks_ui =\n    Lwd.bind (Lwd.get view_mode) ~f:(fun mode ->\n        match mode with\n        | Regular -> current_hunks z_patches\n        | SideBySide -> current_hunks_side_by_side z_patches)\n  in\n  W.vbox\n    [\n      operation_info z_patches;\n      current_operation z_patches;\n      W.scrollbox hunks_ui;\n      (* This now dynamically updates based on view_mode *)\n      Lwd.pure\n      @@ Ui.keyboard_area\n           (function\n             | `ASCII 'q', [] ->\n                 Lwd.set quit true;\n                 `Handled\n             | `ASCII 'n', [] ->\n                 navigate z_patches Next;\n                 `Handled\n             | `ASCII 'p', [] ->\n                 navigate z_patches Prev;\n                 `Handled\n             | `ASCII 't', [] ->\n                 toggle_view_mode ();\n                 `Handled\n             | _ -> `Unhandled)\n           (W.string\n              \"Type 'q' to quit, 'n' to go to the next operation, 'p' to go to \\\n               the previous operation, 't' to toggle view mode\");\n    ]\n=======\n  let curr_scroll_state = Lwd.var W.default_scroll_state in\n  let change_scroll_state _action state =\n    let off_screen = state.W.position > state.W.bound in\n    if off_screen then\n      Lwd.set curr_scroll_state { state with position = state.W.bound }\n    else Lwd.set curr_scroll_state state\n  in\n  let ui =\n    let$* help_visible = Lwd.get help in\n    if help_visible then\n      W.vbox\n        [\n          W.scrollbox @@ Lwd.pure @@ help_panel;\n          Lwd.pure\n          @@ Ui.keyboard_area\n               (function\n                 | `ASCII 'q', [] ->\n                     Lwd.set help false;\n                     `Handled\n                 | _ -> `Unhandled)\n               (W.string \"Type 'q' to exit the help panel\");\n        ]\n    else\n      W.vbox\n        [\n          operation_info z_patches;\n          change_summary z_patches;\n          current_operation z_patches;\n          W.vscroll_area\n            ~state:(Lwd.get curr_scroll_state)\n            ~change:change_scroll_state\n          @@ current_hunks z_patches;\n          Lwd.pure\n          @@ Ui.keyboard_area\n               (function\n                 | `ASCII 'q', [] ->\n                     Lwd.set quit true;\n                     `Handled\n                 | `ASCII 'n', [] ->\n                     navigate z_patches Next;\n                     `Handled\n                 | `ASCII 'p', [] ->\n                     navigate z_patches Prev;\n                     `Handled\n                 | `ASCII 'h', [] ->\n                     Lwd.set help true;\n                     `Handled\n                 | _ -> `Unhandled)\n               (W.string\n                  \"Type 'h' to go to the help panel, 'q' to quit, 'n' to go to \\\n                   the next operation, 'p' to go to the previous operation\");\n        ]\n  in\n  W.vbox [ ui ]\n>>>>>>> 919fc8b94a1766c6d3d2026079115d1a955ad461\n\nlet start patch = Ui_loop.run ~quit ~tick_period:0.2 (view patch)\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 5, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00381469726562ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":7}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"position":{"line":71,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.00309944152832ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":11}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 12, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":12}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":10}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":13}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 15, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":15}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":14}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml","version":2},"contentChanges":[{"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\nlet operation_info z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let num_hunks = List.length p.Patch.hunks in\n  let hunk_text =\n    match num_hunks with\n    | 1 -> \"1 hunk\"\n    | _ -> Printf.sprintf \"%d hunks\" num_hunks\n  in\n  W.string\n    ~attr:Notty.A.(fg lightcyan)\n    (Printf.sprintf \"Operation %d of %d, %s\"\n       (Zipper.get_current_index z + 1)\n       (Zipper.get_total_length z)\n       hunk_text)\n\nlet ui_of_operation operation =\n  let green_bold_attr = Notty.A.(fg green ++ st bold) in\n  let red_bold_attr = Notty.A.(fg red ++ st bold) in\n  let blue_bold_attr = Notty.A.(fg blue ++ st bold) in\n  match operation with\n  | Patch.Create path ->\n      Ui.hcat [ W.string \"Creation of \"; W.string ~attr:green_bold_attr path ]\n  | Patch.Delete path ->\n      Ui.hcat [ W.string \"Deletion of \"; W.string ~attr:red_bold_attr path ]\n  | Patch.Rename (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename with modifications \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Rename_only (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Edit path ->\n      Ui.hcat\n        [ W.string \"Modification of \"; W.string ~attr:blue_bold_attr path ]\n\nlet string_of_hunk = Format.asprintf \"%a\" Patch.pp_hunk\n\nlet current_operation z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  ui_of_operation p.Patch.operation\n\nlet current_hunks z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks = List.map (fun h -> W.string (string_of_hunk h)) p.Patch.hunks in\n  Ui.vcat @@ hunks\n\ntype direction = Prev | Next\n\nlet navigate z_patches (dir : direction) : unit =\n  let z = Lwd.peek z_patches in\n  match dir with\n  | Prev -> Lwd.set z_patches (Zipper.prev z)\n  | Next -> Lwd.set z_patches (Zipper.next z)\n\nlet quit = Lwd.var false\nlet help = Lwd.var false\n\nlet additions_and_removals lines =\n  let add_line (additions, removals) line =\n    match line with\n    | `Their _ -> (additions + 1, removals)\n    | `Mine _ -> (additions, removals + 1)\n    | `Common _ -> (additions, removals)\n  in\n  List.fold_left add_line (0, 0) lines\n\nlet accumulate_count hunks =\n  List.fold_left\n    (fun (add_acc, remove_acc) hunk ->\n      let add_in_hunk, remove_in_hunk =\n        additions_and_removals hunk.Patch.lines\n      in\n      (add_acc + add_in_hunk, remove_acc + remove_in_hunk))\n    (0, 0) hunks\n\nlet change_summary z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let total_additions, total_removals = accumulate_count p.Patch.hunks in\n  let format_plural n singular plural =\n    if n = 1 then Printf.sprintf \"%d %s\" n singular\n    else Printf.sprintf \"%d %s\" n plural\n  in\n  let operation_count =\n    Printf.sprintf \"%s, %s\"\n      (format_plural total_additions \"addition\" \"additions\")\n      (format_plural total_removals \"removal\" \"removals\")\n  in\n  W.string ~attr:Notty.A.(fg lightcyan) operation_count\n\nlet split_hunk hunk =\n  let mine, their =\n    List.fold_left\n      (fun (mine_acc, their_acc) line ->\n        match line with\n        | `Common s -> (mine_acc @ [ `Common s ], their_acc @ [ `Common s ])\n        | `Mine s -> (mine_acc @ [ `Mine s ], their_acc)\n        | `Their s -> (mine_acc, their_acc @ [ `Their s ]))\n      ([], []) hunk.Patch.lines\n  in\n  (mine, their)\n\nlet lines_to_ui_with_numbers lines attr_line_number attr_change =\n  List.mapi\n    (fun index line ->\n      let ui_line, attr =\n        match line with\n        | `Common s ->\n            (s, attr_line_number) (* Common lines use the line number color *)\n        | `Mine s -> (s, attr_change) (* Mine lines use the deletion color *)\n        | `Their s -> (s, attr_change)\n        (* Their lines use the addition color *)\n      in\n      Ui.hcat\n        [\n          W.string ~attr:attr_line_number (Printf.sprintf \"%4d \" (index + 1));\n          W.string ~attr ui_line;\n        ])\n    lines\n\nlet ui_of_hunk_side_by_side hunk =\n  let mine_lines, their_lines = split_hunk hunk in\n\n  let attr_line_number = Notty.A.(fg lightblue) in\n  let attr_mine = Notty.A.(fg red ++ st bold) in\n  let attr_their = Notty.A.(fg green ++ st bold) in\n\n  let separator = W.string ~attr:attr_line_number \"|\" in\n\n  (* For mine lines, we use the deletion color, and for their lines, the addition color *)\n  let mine_ui =\n    lines_to_ui_with_numbers mine_lines attr_line_number attr_mine\n  in\n  let their_ui =\n    lines_to_ui_with_numbers their_lines attr_line_number attr_their\n  in\n\n  let space = Ui.space 1 0 in\n  (* Adding a visual gap *)\n  Ui.hcat [ Ui.vcat mine_ui; space; separator; space; Ui.vcat their_ui ]\n\nlet current_hunks_side_by_side z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks_ui = List.map ui_of_hunk_side_by_side p.Patch.hunks in\n  Ui.vcat @@ hunks_ui\n\ntype view_mode = SideBySide | Regular\n\nlet view_mode = Lwd.var SideBySide\n\nlet toggle_view_mode () =\n  match Lwd.peek view_mode with\n  | Regular -> Lwd.set view_mode SideBySide\n  | SideBySide -> Lwd.set view_mode Regular\n\nlet view (patches : Patch.t list) =\n  let help_panel =\n    Ui.vcat\n      [\n        W.string \"Help Panel:\\n\";\n        W.string \"h:   Open the help panel\";\n        W.string \"q:   Quit the diffcessible viewer\";\n        W.string \"n:   Move to the next operation, if present\";\n        W.string \"p:   Move to the previous operation, if present\";\n      ]\n  in\n  let z_patches : 'a Zipper.t Lwd.var =\n    match Zipper.zipper_of_list patches with\n    | Some z -> Lwd.var z\n    | None -> failwith \"zipper_of_list: empty list\"\n  in\n  W.vbox\n    [\n      operation_info z_patches;\n      current_operation z_patches;\n      W.scrollbox @@ current_hunks z_patches;\n      Lwd.pure\n      @@ Ui.keyboard_area\n           (function\n             | `ASCII 'q', [] ->\n                 Lwd.set quit true;\n                 `Handled\n             | `ASCII 'n', [] ->\n                 navigate z_patches Next;\n                 `Handled\n             | `ASCII 'p', [] ->\n                 navigate z_patches Prev;\n                 `Handled\n             | _ -> `Unhandled)\n           (W.string\n              \"Type 'q' to quit, 'n' to go to the next operation, 'p' to go to \\\n               the previous operation\");\n    ]\n\nlet start patch = Ui_loop.run ~quit ~tick_period:0.2 (view patch)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml","version":2},"contentChanges":[{"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\nlet operation_info z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let num_hunks = List.length p.Patch.hunks in\n  let hunk_text =\n    match num_hunks with\n    | 1 -> \"1 hunk\"\n    | _ -> Printf.sprintf \"%d hunks\" num_hunks\n  in\n  W.string\n    ~attr:Notty.A.(fg lightcyan)\n    (Printf.sprintf \"Operation %d of %d, %s\"\n       (Zipper.get_current_index z + 1)\n       (Zipper.get_total_length z)\n       hunk_text)\n\nlet ui_of_operation operation =\n  let green_bold_attr = Notty.A.(fg green ++ st bold) in\n  let red_bold_attr = Notty.A.(fg red ++ st bold) in\n  let blue_bold_attr = Notty.A.(fg blue ++ st bold) in\n  match operation with\n  | Patch.Create path ->\n      Ui.hcat [ W.string \"Creation of \"; W.string ~attr:green_bold_attr path ]\n  | Patch.Delete path ->\n      Ui.hcat [ W.string \"Deletion of \"; W.string ~attr:red_bold_attr path ]\n  | Patch.Rename (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename with modifications \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Rename_only (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Edit path ->\n      Ui.hcat\n        [ W.string \"Modification of \"; W.string ~attr:blue_bold_attr path ]\n\nlet string_of_hunk = Format.asprintf \"%a\" Patch.pp_hunk\n\nlet current_operation z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  ui_of_operation p.Patch.operation\n\nlet current_hunks z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks = List.map (fun h -> W.string (string_of_hunk h)) p.Patch.hunks in\n  Ui.vcat @@ hunks\n\ntype direction = Prev | Next\n\nlet navigate z_patches (dir : direction) : unit =\n  let z = Lwd.peek z_patches in\n  match dir with\n  | Prev -> Lwd.set z_patches (Zipper.prev z)\n  | Next -> Lwd.set z_patches (Zipper.next z)\n\nlet quit = Lwd.var false\nlet help = Lwd.var false\n\nlet additions_and_removals lines =\n  let add_line (additions, removals) line =\n    match line with\n    | `Their _ -> (additions + 1, removals)\n    | `Mine _ -> (additions, removals + 1)\n    | `Common _ -> (additions, removals)\n  in\n  List.fold_left add_line (0, 0) lines\n\nlet accumulate_count hunks =\n  List.fold_left\n    (fun (add_acc, remove_acc) hunk ->\n      let add_in_hunk, remove_in_hunk =\n        additions_and_removals hunk.Patch.lines\n      in\n      (add_acc + add_in_hunk, remove_acc + remove_in_hunk))\n    (0, 0) hunks\n\nlet change_summary z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let total_additions, total_removals = accumulate_count p.Patch.hunks in\n  let format_plural n singular plural =\n    if n = 1 then Printf.sprintf \"%d %s\" n singular\n    else Printf.sprintf \"%d %s\" n plural\n  in\n  let operation_count =\n    Printf.sprintf \"%s, %s\"\n      (format_plural total_additions \"addition\" \"additions\")\n      (format_plural total_removals \"removal\" \"removals\")\n  in\n  W.string ~attr:Notty.A.(fg lightcyan) operation_count\n\nlet split_hunk hunk =\n  let mine, their =\n    List.fold_left\n      (fun (mine_acc, their_acc) line ->\n        match line with\n        | `Common s -> (mine_acc @ [ `Common s ], their_acc @ [ `Common s ])\n        | `Mine s -> (mine_acc @ [ `Mine s ], their_acc)\n        | `Their s -> (mine_acc, their_acc @ [ `Their s ]))\n      ([], []) hunk.Patch.lines\n  in\n  (mine, their)\n\nlet lines_to_ui_with_numbers lines attr_line_number attr_change =\n  List.mapi\n    (fun index line ->\n      let ui_line, attr =\n        match line with\n        | `Common s ->\n            (s, attr_line_number) (* Common lines use the line number color *)\n        | `Mine s -> (s, attr_change) (* Mine lines use the deletion color *)\n        | `Their s -> (s, attr_change)\n        (* Their lines use the addition color *)\n      in\n      Ui.hcat\n        [\n          W.string ~attr:attr_line_number (Printf.sprintf \"%4d \" (index + 1));\n          W.string ~attr ui_line;\n        ])\n    lines\n\nlet ui_of_hunk_side_by_side hunk =\n  let mine_lines, their_lines = split_hunk hunk in\n\n  let attr_line_number = Notty.A.(fg lightblue) in\n  let attr_mine = Notty.A.(fg red ++ st bold) in\n  let attr_their = Notty.A.(fg green ++ st bold) in\n\n  let separator = W.string ~attr:attr_line_number \"|\" in\n\n  (* For mine lines, we use the deletion color, and for their lines, the addition color *)\n  let mine_ui =\n    lines_to_ui_with_numbers mine_lines attr_line_number attr_mine\n  in\n  let their_ui =\n    lines_to_ui_with_numbers their_lines attr_line_number attr_their\n  in\n\n  let space = Ui.space 1 0 in\n  (* Adding a visual gap *)\n  Ui.hcat [ Ui.vcat mine_ui; space; separator; space; Ui.vcat their_ui ]\n\nlet current_hunks_side_by_side z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks_ui = List.map ui_of_hunk_side_by_side p.Patch.hunks in\n  Ui.vcat @@ hunks_ui\n\ntype view_mode = SideBySide | Regular\n\nlet view_mode = Lwd.var SideBySide\n\nlet toggle_view_mode () =\n  match Lwd.peek view_mode with\n  | Regular -> Lwd.set view_mode SideBySide\n  | SideBySide -> Lwd.set view_mode Regular\n\nlet view (patches : Patch.t list) =\n  let help_panel =\n    Ui.vcat\n      [\n        W.string \"Help Panel:\\n\";\n        W.string \"h:   Open the help panel\";\n        W.string \"q:   Quit the diffcessible viewer\";\n        W.string \"n:   Move to the next operation, if present\";\n        W.string \"p:   Move to the previous operation, if present\";\n      ]\n  in\n  let z_patches : 'a Zipper.t Lwd.var =\n    match Zipper.zipper_of_list patches with\n    | Some z -> Lwd.var z\n    | None -> failwith \"zipper_of_list: empty list\"\n  in\n  W.vbox\n    [\n      operation_info z_patches;\n      current_operation z_patches;\n      W.scrollbox @@ current_hunks z_patches;\n      Lwd.pure\n      @@ Ui.keyboard_area\n           (function\n             | `ASCII 'q', [] ->\n                 Lwd.set quit true;\n                 `Handled\n             | `ASCII 'n', [] ->\n                 navigate z_patches Next;\n                 `Handled\n             | `ASCII 'p', [] ->\n                 navigate z_patches Prev;\n                 `Handled\n             | _ -> `Unhandled)\n           (W.string\n              \"Type 'q' to quit, 'n' to go to the next operation, 'p' to go to \\\n               the previous operation\");\n    ]\n\nlet start patch = Ui_loop.run ~quit ~tick_period:0.2 (view patch)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml","version":2}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml","version":15},"contentChanges":[{"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\nlet operation_info z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let num_hunks = List.length p.Patch.hunks in\n  let hunk_text =\n    match num_hunks with\n    | 1 -> \"1 hunk\"\n    | _ -> Printf.sprintf \"%d hunks\" num_hunks\n  in\n  W.string\n    ~attr:Notty.A.(fg lightcyan)\n    (Printf.sprintf \"Operation %d of %d, %s\"\n       (Zipper.get_current_index z + 1)\n       (Zipper.get_total_length z)\n       hunk_text)\n\nlet ui_of_operation operation =\n  let green_bold_attr = Notty.A.(fg green ++ st bold) in\n  let red_bold_attr = Notty.A.(fg red ++ st bold) in\n  let blue_bold_attr = Notty.A.(fg blue ++ st bold) in\n  match operation with\n  | Patch.Create path ->\n      Ui.hcat [ W.string \"Creation of \"; W.string ~attr:green_bold_attr path ]\n  | Patch.Delete path ->\n      Ui.hcat [ W.string \"Deletion of \"; W.string ~attr:red_bold_attr path ]\n  | Patch.Rename (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename with modifications \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Rename_only (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Edit path ->\n      Ui.hcat\n        [ W.string \"Modification of \"; W.string ~attr:blue_bold_attr path ]\n\nlet string_of_hunk = Format.asprintf \"%a\" Patch.pp_hunk\n\nlet current_operation z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  ui_of_operation p.Patch.operation\n\nlet current_hunks z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks = List.map (fun h -> W.string (string_of_hunk h)) p.Patch.hunks in\n  Ui.vcat @@ hunks\n\ntype direction = Prev | Next\n\nlet navigate z_patches (dir : direction) : unit =\n  let z = Lwd.peek z_patches in\n  match dir with\n  | Prev -> Lwd.set z_patches (Zipper.prev z)\n  | Next -> Lwd.set z_patches (Zipper.next z)\n\nlet quit = Lwd.var false\nlet help = Lwd.var false\n\nlet additions_and_removals lines =\n  let add_line (additions, removals) line =\n    match line with\n    | `Their _ -> (additions + 1, removals)\n    | `Mine _ -> (additions, removals + 1)\n    | `Common _ -> (additions, removals)\n  in\n  List.fold_left add_line (0, 0) lines\n\nlet accumulate_count hunks =\n  List.fold_left\n    (fun (add_acc, remove_acc) hunk ->\n      let add_in_hunk, remove_in_hunk =\n        additions_and_removals hunk.Patch.lines\n      in\n      (add_acc + add_in_hunk, remove_acc + remove_in_hunk))\n    (0, 0) hunks\n\nlet change_summary z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let total_additions, total_removals = accumulate_count p.Patch.hunks in\n  let format_plural n singular plural =\n    if n = 1 then Printf.sprintf \"%d %s\" n singular\n    else Printf.sprintf \"%d %s\" n plural\n  in\n  let operation_count =\n    Printf.sprintf \"%s, %s\"\n      (format_plural total_additions \"addition\" \"additions\")\n      (format_plural total_removals \"removal\" \"removals\")\n  in\n  W.string ~attr:Notty.A.(fg lightcyan) operation_count\n\nlet view (patches : Patch.t list) =\n  let help_panel =\n    Ui.vcat\n      [\n        W.string \"Help Panel:\\n\";\n        W.string \"h:   Open the help panel\";\n        W.string \"q:   Quit the diffcessible viewer\";\n        W.string \"n:   Move to the next operation, if present\";\n        W.string \"p:   Move to the previous operation, if present\";\n      ]\n  in\n  let z_patches : 'a Zipper.t Lwd.var =\n    match Zipper.zipper_of_list patches with\n    | Some z -> Lwd.var z\n    | None -> failwith \"zipper_of_list: empty list\"\n  in\n  let curr_scroll_state = Lwd.var W.default_scroll_state in\n  let change_scroll_state _action state =\n    let off_screen = state.W.position > state.W.bound in\n    if off_screen then\n      Lwd.set curr_scroll_state { state with position = state.W.bound }\n    else Lwd.set curr_scroll_state state\n  in\n  let ui =\n    let$* help_visible = Lwd.get help in\n    if help_visible then\n      W.vbox\n        [\n          W.scrollbox @@ Lwd.pure @@ help_panel;\n          Lwd.pure\n          @@ Ui.keyboard_area\n               (function\n                 | `ASCII 'q', [] ->\n                     Lwd.set help false;\n                     `Handled\n                 | _ -> `Unhandled)\n               (W.string \"Type 'q' to exit the help panel\");\n        ]\n    else\n      W.vbox\n        [\n          operation_info z_patches;\n          change_summary z_patches;\n          current_operation z_patches;\n          W.vscroll_area\n            ~state:(Lwd.get curr_scroll_state)\n            ~change:change_scroll_state\n          @@ current_hunks z_patches;\n          Lwd.pure\n          @@ Ui.keyboard_area\n               (function\n                 | `ASCII 'q', [] ->\n                     Lwd.set quit true;\n                     `Handled\n                 | `ASCII 'n', [] ->\n                     navigate z_patches Next;\n                     `Handled\n                 | `ASCII 'p', [] ->\n                     navigate z_patches Prev;\n                     `Handled\n                 | `ASCII 'h', [] ->\n                     Lwd.set help true;\n                     `Handled\n                 | _ -> `Unhandled)\n               (W.string\n                  \"Type 'h' to go to the help panel, 'q' to quit, 'n' to go to \\\n                   the next operation, 'p' to go to the previous operation\");\n        ]\n  in\n  W.vbox [ ui ]\n\nlet start patch = Ui_loop.run ~quit ~tick_period:0.2 (view patch)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0228881835938ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml","version":15},"contentChanges":[{"text":"open Nottui\nmodule W = Nottui_widgets\nopen Lwd_infix\n\nlet operation_info z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let num_hunks = List.length p.Patch.hunks in\n  let hunk_text =\n    match num_hunks with\n    | 1 -> \"1 hunk\"\n    | _ -> Printf.sprintf \"%d hunks\" num_hunks\n  in\n  W.string\n    ~attr:Notty.A.(fg lightcyan)\n    (Printf.sprintf \"Operation %d of %d, %s\"\n       (Zipper.get_current_index z + 1)\n       (Zipper.get_total_length z)\n       hunk_text)\n\nlet ui_of_operation operation =\n  let green_bold_attr = Notty.A.(fg green ++ st bold) in\n  let red_bold_attr = Notty.A.(fg red ++ st bold) in\n  let blue_bold_attr = Notty.A.(fg blue ++ st bold) in\n  match operation with\n  | Patch.Create path ->\n      Ui.hcat [ W.string \"Creation of \"; W.string ~attr:green_bold_attr path ]\n  | Patch.Delete path ->\n      Ui.hcat [ W.string \"Deletion of \"; W.string ~attr:red_bold_attr path ]\n  | Patch.Rename (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename with modifications \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Rename_only (old_path, new_path) ->\n      Ui.hcat\n        [\n          W.string \"Rename \";\n          W.string ~attr:blue_bold_attr old_path;\n          W.string \" to \";\n          W.string ~attr:green_bold_attr new_path;\n        ]\n  | Patch.Edit path ->\n      Ui.hcat\n        [ W.string \"Modification of \"; W.string ~attr:blue_bold_attr path ]\n\nlet string_of_hunk = Format.asprintf \"%a\" Patch.pp_hunk\n\nlet current_operation z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  ui_of_operation p.Patch.operation\n\nlet current_hunks z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let hunks = List.map (fun h -> W.string (string_of_hunk h)) p.Patch.hunks in\n  Ui.vcat @@ hunks\n\ntype direction = Prev | Next\n\nlet navigate z_patches (dir : direction) : unit =\n  let z = Lwd.peek z_patches in\n  match dir with\n  | Prev -> Lwd.set z_patches (Zipper.prev z)\n  | Next -> Lwd.set z_patches (Zipper.next z)\n\nlet quit = Lwd.var false\nlet help = Lwd.var false\n\nlet additions_and_removals lines =\n  let add_line (additions, removals) line =\n    match line with\n    | `Their _ -> (additions + 1, removals)\n    | `Mine _ -> (additions, removals + 1)\n    | `Common _ -> (additions, removals)\n  in\n  List.fold_left add_line (0, 0) lines\n\nlet accumulate_count hunks =\n  List.fold_left\n    (fun (add_acc, remove_acc) hunk ->\n      let add_in_hunk, remove_in_hunk =\n        additions_and_removals hunk.Patch.lines\n      in\n      (add_acc + add_in_hunk, remove_acc + remove_in_hunk))\n    (0, 0) hunks\n\nlet change_summary z_patches : ui Lwd.t =\n  let$ z = Lwd.get z_patches in\n  let p = Zipper.get_focus z in\n  let total_additions, total_removals = accumulate_count p.Patch.hunks in\n  let format_plural n singular plural =\n    if n = 1 then Printf.sprintf \"%d %s\" n singular\n    else Printf.sprintf \"%d %s\" n plural\n  in\n  let operation_count =\n    Printf.sprintf \"%s, %s\"\n      (format_plural total_additions \"addition\" \"additions\")\n      (format_plural total_removals \"removal\" \"removals\")\n  in\n  W.string ~attr:Notty.A.(fg lightcyan) operation_count\n\nlet view (patches : Patch.t list) =\n  let help_panel =\n    Ui.vcat\n      [\n        W.string \"Help Panel:\\n\";\n        W.string \"h:   Open the help panel\";\n        W.string \"q:   Quit the diffcessible viewer\";\n        W.string \"n:   Move to the next operation, if present\";\n        W.string \"p:   Move to the previous operation, if present\";\n      ]\n  in\n  let z_patches : 'a Zipper.t Lwd.var =\n    match Zipper.zipper_of_list patches with\n    | Some z -> Lwd.var z\n    | None -> failwith \"zipper_of_list: empty list\"\n  in\n  let curr_scroll_state = Lwd.var W.default_scroll_state in\n  let change_scroll_state _action state =\n    let off_screen = state.W.position > state.W.bound in\n    if off_screen then\n      Lwd.set curr_scroll_state { state with position = state.W.bound }\n    else Lwd.set curr_scroll_state state\n  in\n  let ui =\n    let$* help_visible = Lwd.get help in\n    if help_visible then\n      W.vbox\n        [\n          W.scrollbox @@ Lwd.pure @@ help_panel;\n          Lwd.pure\n          @@ Ui.keyboard_area\n               (function\n                 | `ASCII 'q', [] ->\n                     Lwd.set help false;\n                     `Handled\n                 | _ -> `Unhandled)\n               (W.string \"Type 'q' to exit the help panel\");\n        ]\n    else\n      W.vbox\n        [\n          operation_info z_patches;\n          change_summary z_patches;\n          current_operation z_patches;\n          W.vscroll_area\n            ~state:(Lwd.get curr_scroll_state)\n            ~change:change_scroll_state\n          @@ current_hunks z_patches;\n          Lwd.pure\n          @@ Ui.keyboard_area\n               (function\n                 | `ASCII 'q', [] ->\n                     Lwd.set quit true;\n                     `Handled\n                 | `ASCII 'n', [] ->\n                     navigate z_patches Next;\n                     `Handled\n                 | `ASCII 'p', [] ->\n                     navigate z_patches Prev;\n                     `Handled\n                 | `ASCII 'h', [] ->\n                     Lwd.set help true;\n                     `Handled\n                 | _ -> `Unhandled)\n               (W.string\n                  \"Type 'h' to go to the help panel, 'q' to quit, 'n' to go to \\\n                   the next operation, 'p' to go to the previous operation\");\n        ]\n  in\n  W.vbox [ ui ]\n\nlet start patch = Ui_loop.run ~quit ~tick_period:0.2 (view patch)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml","version":15}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":172,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"Compiler version mismatch: this project seems to be compiled with a version of the OCaml compiler that is not supported by this version of ocamllsp. OCaml language support will not work properly until this problem is fixed. \nHint: It seems that the project is built with a newer OCaml compiler version that the running ocamllsp version does not know about. Make sure your editor runs a version of ocamllsp that supports this version of the compiler. \nThis diagnostic is based on the compiled interface file: /Users/yokurang/Documents/OpenSource/diffcessible/_build/default/vendor/lwd/lib/nottui/.nottui.objs/byte/nottui_widgets.cmi","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/interactive_viewer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
