Hello - from /Users/yokurang/.vscode/extensions/jaredly.reason-vscode-1.7.13/bin.native
Previous log location: /var/folders/46/021wbfj97knb3m7s2khbp36r0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/WordDiff.ml","languageId":"ocaml","version":1,"text":"open Nottui\nmodule W = Nottui_widgets\n\ntype word_diff =\n  | WDeleted of string array\n  | WAdded of string array\n  | WEqual of string array\n\ntype line_change =\n  | Common of string\n  | Added of string\n  | Deleted of string\n  | Modified of word_diff list\n\ntype hunk = {\n  mine_start : int;\n  mine_len : int;\n  their_start : int;\n  their_len : int;\n  lines : line_change list;\n}\n\nlet string_to_words s = Array.of_list (String.split_on_char ' ' s)\nlet words_to_string words = String.concat \" \" (Array.to_list words)\n\nmodule Diff = struct\n  include Simple_diff.Make (String)\n\n  let diff_words s1 s2 =\n    let words1 = string_to_words s1 in\n    let words2 = string_to_words s2 in\n    get_diff words1 words2\n\n  let apply_word_diff s1 s2 =\n    let diff = diff_words s1 s2 in\n    List.map\n      (function\n        | Deleted words -> WDeleted words\n        | Added words -> WAdded words\n        | Equal words -> WEqual words)\n      diff\nend\n\nlet compute (patch_hunk : Patch.hunk) : hunk =\n  let rec process_changes acc = function\n    | [] -> List.rev acc\n    | `Mine m :: `Their t :: rest ->\n        process_changes (Modified (Diff.apply_word_diff m t) :: acc) rest\n    | `Their t :: rest -> process_changes (Added t :: acc) rest\n    | `Mine m :: rest -> process_changes (Deleted m :: acc) rest\n    | `Common c :: rest -> process_changes (Common c :: acc) rest\n  in\n  {\n    mine_start = patch_hunk.Patch.mine_start;\n    mine_len = patch_hunk.Patch.mine_len;\n    their_start = patch_hunk.Patch.their_start;\n    their_len = patch_hunk.Patch.their_len;\n    lines = process_changes [] patch_hunk.Patch.lines;\n  }\n\nlet word_to_ui word attr = W.string ~attr (word ^ \" \")\n\nlet render_diff_line mine_num their_num attr diff_type diff =\n  let format_line_number =\n    match diff_type with\n    | `Added -> W.string ~attr (Printf.sprintf \"   %2d + \" (their_num + 1))\n    | `Deleted -> W.string ~attr (Printf.sprintf \"%2d    - \" (mine_num + 1))\n    | `Equal ->\n        W.string ~attr:Notty.A.empty\n          (Printf.sprintf \"%2d %2d   \" (mine_num + 1) (their_num + 1))\n  in\n  Ui.hcat\n    [\n      format_line_number;\n      Ui.hcat\n        (List.map\n           (function\n             | WDeleted words when diff_type = `Deleted ->\n                 word_to_ui (words_to_string words) attr\n             | WAdded words when diff_type = `Added ->\n                 word_to_ui (words_to_string words) attr\n             | WEqual words -> word_to_ui (words_to_string words) Notty.A.empty\n             | _ -> Ui.empty)\n           diff);\n    ]\n\nlet render_line_diff mine_num their_num = function\n  | Common text ->\n      ( mine_num + 1,\n        their_num + 1,\n        render_diff_line mine_num their_num Notty.A.empty `Equal\n          [ WEqual (string_to_words text) ] )\n  | Deleted text ->\n      ( mine_num + 1,\n        their_num,\n        render_diff_line mine_num their_num\n          Notty.A.(fg red)\n          `Deleted\n          [ WDeleted (string_to_words text) ] )\n  | Added text ->\n      ( mine_num,\n        their_num + 1,\n        render_diff_line mine_num their_num\n          Notty.A.(fg green)\n          `Added\n          [ WAdded (string_to_words text) ] )\n  | Modified diff ->\n      ( mine_num + 1,\n        their_num + 1,\n        Ui.vcat\n          [\n            render_diff_line mine_num their_num\n              Notty.A.(fg red)\n              `Deleted\n              (List.filter\n                 (function WDeleted _ | WEqual _ -> true | _ -> false)\n                 diff);\n            render_diff_line mine_num their_num\n              Notty.A.(fg green)\n              `Added\n              (List.filter\n                 (function WAdded _ | WEqual _ -> true | _ -> false)\n                 diff);\n          ] )\n\nlet render_hunk (hunk : hunk) : Nottui.ui =\n  let lines_ui =\n    let rec process_lines mine_num their_num acc = function\n      | [] -> List.rev acc\n      | line :: rest ->\n          let new_mine, new_their, ui =\n            render_line_diff mine_num their_num line\n          in\n          process_lines new_mine new_their (ui :: acc) rest\n    in\n    process_lines hunk.mine_start hunk.their_start [] hunk.lines\n  in\n  Ui.vcat lines_ui\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yokurang/Documents/OpenSource/diffcessible/lib/HunkView.ml","languageId":"ocaml","version":1,"text":"open Nottui\nmodule W = Nottui_widgets\n\n(* Types *)\n\ntype line = Change of string | Common of string | Empty\n\n(* Utility Functions *)\n\nlet split_and_align_hunk hunks : line list * line list =\n  let rec process_hunk mine_acc their_acc = function\n    | [] -> (List.rev mine_acc, List.rev their_acc)\n    | `Common line :: rest ->\n        process_hunk (Common line :: mine_acc) (Common line :: their_acc) rest\n    | changes ->\n        let rec buffer_changes mine their = function\n          | `Mine line :: rest ->\n              buffer_changes (Change line :: mine) their rest\n          | `Their line :: rest ->\n              buffer_changes mine (Change line :: their) rest\n          | remaining -> (List.rev mine, List.rev their, remaining)\n        in\n        let mine_changes, their_changes, rest = buffer_changes [] [] changes in\n        let max_len =\n          max (List.length mine_changes) (List.length their_changes)\n        in\n        let rec pad_and_append orig_acc changes i =\n          if i < max_len then\n            if i < List.length changes then\n              pad_and_append (List.nth changes i :: orig_acc) changes (i + 1)\n            else pad_and_append (Empty :: orig_acc) changes (i + 1)\n          else orig_acc\n        in\n        let new_mine_acc = pad_and_append mine_acc mine_changes 0 in\n        let new_their_acc = pad_and_append their_acc their_changes 0 in\n        process_hunk new_mine_acc new_their_acc rest\n  in\n  process_hunk [] [] hunks\n\n(* UI Functions *)\n\nlet ui_hunk_summary (hunk : Patch.hunk) : Nottui.ui =\n  let mine_info =\n    if hunk.Patch.mine_len = 0 then \"0,0\"\n    else Printf.sprintf \"%d,%d\" (hunk.Patch.mine_start + 1) hunk.Patch.mine_len\n  in\n  let their_info =\n    if hunk.Patch.their_len = 0 then \"0,0\"\n    else\n      Printf.sprintf \"%d,%d\" (hunk.Patch.their_start + 1) hunk.Patch.their_len\n  in\n  let mine_summary =\n    W.string ~attr:Notty.A.(fg red) (Printf.sprintf \"-%s\" mine_info)\n  in\n  let their_summary =\n    W.string ~attr:Notty.A.(fg green) (Printf.sprintf \"+%s\" their_info)\n  in\n  let at_symbols = W.string ~attr:Notty.A.(fg lightblue) \"@@\" in\n  Ui.hcat\n    [\n      at_symbols;\n      W.string \" \";\n      mine_summary;\n      W.string \" \";\n      their_summary;\n      W.string \" \";\n      at_symbols;\n    ]\n\nlet ui_unified_diff (hunk : Patch.hunk) : Nottui.ui =\n  let word_diff_hunk = WordDiff.compute hunk in\n  let hunk_summary = ui_hunk_summary hunk in\n  let hunk_content = WordDiff.render_hunk word_diff_hunk in\n  Ui.vcat [ hunk_summary; hunk_content ]\n\nlet current_hunks (z_patches : Patch.t Zipper.t) : Nottui.ui =\n  let p = Zipper.get_focus z_patches in\n  let hunks = List.map ui_unified_diff p.Patch.hunks in\n  Ui.vcat hunks\n\n(** Side by side diff view implementation **)\n\nlet create_summary (start_line_num : int) (hunk_length : int)\n    (attr : Notty.attr) (change_type : [ `Add | `Remove ]) : Nottui.ui =\n  let sign = match change_type with `Add -> \"+\" | `Remove -> \"-\" in\n  if hunk_length > 0 then\n    W.string ~attr\n      (Printf.sprintf \"@@ %s%d,%d @@\" sign start_line_num hunk_length)\n  else W.string ~attr (Printf.sprintf \"@@ %s0,0 @@\" sign)\n\nlet lines_with_numbers (lines : line list) (attr_change : Notty.attr)\n    (prefix : string) : Nottui.ui list =\n  let rec process_lines line_num acc = function\n    | [] -> List.rev acc\n    | line :: rest ->\n        let content, attr, next_num =\n          match line with\n          | Common s ->\n              let content = Printf.sprintf \"%3d   %s\" line_num s in\n              (content, Notty.A.empty, line_num + 1)\n          | Change s ->\n              let content = Printf.sprintf \"%3d %s %s\" line_num prefix s in\n              (content, attr_change, line_num + 1)\n          | Empty ->\n              let content = Printf.sprintf \"      \" in\n              (content, Notty.A.empty, line_num)\n        in\n        let new_acc = W.string ~attr content :: acc in\n        process_lines next_num new_acc rest\n  in\n  process_lines 1 [] lines\n\nlet ui_of_hunk_side_by_side (hunk : Patch.hunk) : Nottui.ui =\n  let attr_mine = Notty.A.(fg red ++ st bold) in\n  let attr_their = Notty.A.(fg green ++ st bold) in\n\n  let mine_lines, their_lines = split_and_align_hunk hunk.Patch.lines in\n\n  let content_mine = lines_with_numbers mine_lines attr_mine \"-\" in\n  let content_their = lines_with_numbers their_lines attr_their \"+\" in\n  let summary_mine =\n    create_summary\n      (hunk.Patch.mine_start + 1)\n      hunk.Patch.mine_len attr_mine `Remove\n  in\n  let summary_their =\n    create_summary\n      (hunk.Patch.their_start + 1)\n      hunk.Patch.their_len attr_their `Add\n  in\n  let space = Ui.space 1 0 in\n  Ui.hcat\n    [\n      Ui.resize ~w:0 ~sw:2 (Ui.vcat (summary_mine :: content_mine));\n      space;\n      Ui.resize ~w:0 ~sw:2 (Ui.vcat (summary_their :: content_their));\n    ]\n\nlet current_hunks_side_by_side (z_patches : Patch.t Zipper.t) : Nottui.ui =\n  let p = Zipper.get_focus z_patches in\n  let hunks_ui = List.map ui_of_hunk_side_by_side p.Patch.hunks in\n  Ui.vcat hunks_ui\n"}}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/yokurang/Documents/OpenSource/diffcessible/lib/.merlin"}}
Found a `dune` file at /Users/yokurang/Documents/OpenSource/diffcessible/lib
]] Making a new jbuilder package at /Users/yokurang/Documents/OpenSource/diffcessible/lib
=== Project root: /Users/yokurang/Documents/OpenSource/diffcessible
Detected `opam` dependency manager for local use
